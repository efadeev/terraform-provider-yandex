// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package metastore_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cluster_config": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: ClusterConfigType{
					ObjectType: types.ObjectType{
						AttrTypes: ClusterConfigValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Hive Metastore cluster configuration.",
				MarkdownDescription: "Hive Metastore cluster configuration.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The creation timestamp of the resource.",
				MarkdownDescription: "The creation timestamp of the resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"deletion_protection": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The `true` value means that resource is protected from accidental deletion. By default is set to `false`.",
				MarkdownDescription: "The `true` value means that resource is protected from accidental deletion. By default is set to `false`.",
				Default:             booldefault.StaticBool(false),
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Description:         "The resource description.",
				MarkdownDescription: "The resource description.",
			},
			"endpoint_ip": schema.StringAttribute{
				Computed:            true,
				Description:         "IP address of Metastore server balancer endpoint.",
				MarkdownDescription: "IP address of Metastore server balancer endpoint.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"folder_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
				MarkdownDescription: "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The resource identifier.",
				MarkdownDescription: "The resource identifier.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "A set of key/value label pairs which assigned to resource.",
				MarkdownDescription: "A set of key/value label pairs which assigned to resource.",
			},
			"logging": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Required:            true,
						Description:         "Enables delivery of logs generated by Metastore to [Cloud Logging](https://yandex.cloud/docs/logging/).",
						MarkdownDescription: "Enables delivery of logs generated by Metastore to [Cloud Logging](https://yandex.cloud/docs/logging/).",
					},
					"folder_id": schema.StringAttribute{
						Optional:            true,
						Description:         "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						MarkdownDescription: "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
					},
					"log_group_id": schema.StringAttribute{
						Optional:            true,
						Description:         "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						MarkdownDescription: "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
					},
					"min_level": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						MarkdownDescription: "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
						Validators: []validator.String{
							logLevelValidator(),
						},
						Default: stringdefault.StaticString("LEVEL_UNSPECIFIED"),
					},
				},
				CustomType: LoggingType{
					ObjectType: types.ObjectType{
						AttrTypes: LoggingValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Cloud Logging configuration.",
				MarkdownDescription: "Cloud Logging configuration.",
			},
			"maintenance_window": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"day": schema.StringAttribute{
						Optional:            true,
						Description:         "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						MarkdownDescription: "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						Validators: []validator.String{
							mwDayValidator(),
						},
					},
					"hour": schema.Int64Attribute{
						Optional:            true,
						Description:         "Hour of day in UTC time zone (1-24) for maintenance window.",
						MarkdownDescription: "Hour of day in UTC time zone (1-24) for maintenance window.",
						Validators: []validator.Int64{
							mwHourValidator(),
						},
					},
					"type": schema.StringAttribute{
						Optional:            true,
						Description:         "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						MarkdownDescription: "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						Validators: []validator.String{
							mwTypeValidator(),
						},
					},
				},
				CustomType: MaintenanceWindowType{
					ObjectType: types.ObjectType{
						AttrTypes: MaintenanceWindowValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Configuration of window for maintenance operations.",
				MarkdownDescription: "Configuration of window for maintenance operations.",
				PlanModifiers: []planmodifier.Object{
					mwPlanModifier(),
				},
				Validators: []validator.Object{
					mwValidator(),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The resource name.",
				MarkdownDescription: "The resource name.",
			},
			"network_id": schema.StringAttribute{
				Computed:            true,
				Description:         "VPC network identifier which resource is attached.",
				MarkdownDescription: "VPC network identifier which resource is attached.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"security_group_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The list of security groups applied to resource or their components.",
				MarkdownDescription: "The list of security groups applied to resource or their components.",
			},
			"service_account_id": schema.StringAttribute{
				Required:            true,
				Description:         "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) with role `managed-metastore.integrationProvider`. For more information, see [documentation](https://yandex.cloud/docs/metadata-hub/concepts/metastore-impersonation).",
				MarkdownDescription: "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) with role `managed-metastore.integrationProvider`. For more information, see [documentation](https://yandex.cloud/docs/metadata-hub/concepts/metastore-impersonation).",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.",
				MarkdownDescription: "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"subnet_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "The list of VPC subnets identifiers which resource is attached.",
				MarkdownDescription: "The list of VPC subnets identifiers which resource is attached.",
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.RequiresReplace(),
				},
			},
			"version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Metastore server version.",
				MarkdownDescription: "Metastore server version.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": schema.SingleNestedBlock{
				CustomType: timeouts.Type{},
			},
		},
		Description: "Managed Metastore cluster.",
	}
}

type ClusterModel struct {
	ClusterConfig      ClusterConfigValue     `tfsdk:"cluster_config"`
	CreatedAt          types.String           `tfsdk:"created_at"`
	DeletionProtection types.Bool             `tfsdk:"deletion_protection"`
	Description        types.String           `tfsdk:"description"`
	EndpointIp         types.String           `tfsdk:"endpoint_ip"`
	FolderId           types.String           `tfsdk:"folder_id"`
	Id                 types.String           `tfsdk:"id"`
	Labels             types.Map              `tfsdk:"labels"`
	Logging            LoggingValue           `tfsdk:"logging"`
	MaintenanceWindow  MaintenanceWindowValue `tfsdk:"maintenance_window"`
	Name               types.String           `tfsdk:"name"`
	NetworkId          types.String           `tfsdk:"network_id"`
	SecurityGroupIds   types.Set              `tfsdk:"security_group_ids"`
	ServiceAccountId   types.String           `tfsdk:"service_account_id"`
	Status             types.String           `tfsdk:"status"`
	SubnetIds          types.Set              `tfsdk:"subnet_ids"`
	Version            types.String           `tfsdk:"version"`
	Timeouts           timeouts.Value         `tfsdk:"timeouts"`
}

var _ basetypes.ObjectTypable = ClusterConfigType{}

type ClusterConfigType struct {
	basetypes.ObjectType
}

func (t ClusterConfigType) Equal(o attr.Type) bool {
	other, ok := o.(ClusterConfigType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ClusterConfigType) String() string {
	return "ClusterConfigType"
}

func (t ClusterConfigType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ClusterConfigValue{
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewClusterConfigValueNull() ClusterConfigValue {
	return ClusterConfigValue{
		state: attr.ValueStateNull,
	}
}

func NewClusterConfigValueUnknown() ClusterConfigValue {
	return ClusterConfigValue{
		state: attr.ValueStateUnknown,
	}
}

func NewClusterConfigValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ClusterConfigValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ClusterConfigValue Attribute Value",
				"While creating a ClusterConfigValue value, a missing attribute value was detected. "+
					"A ClusterConfigValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ClusterConfigValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ClusterConfigValue Attribute Type",
				"While creating a ClusterConfigValue value, an invalid attribute value was detected. "+
					"A ClusterConfigValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ClusterConfigValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ClusterConfigValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ClusterConfigValue Attribute Value",
				"While creating a ClusterConfigValue value, an extra attribute value was detected. "+
					"A ClusterConfigValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ClusterConfigValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewClusterConfigValueUnknown(), diags
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewClusterConfigValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewClusterConfigValueUnknown(), diags
	}

	return ClusterConfigValue{
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewClusterConfigValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ClusterConfigValue {
	object, diags := NewClusterConfigValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewClusterConfigValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ClusterConfigType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewClusterConfigValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewClusterConfigValueUnknown(), nil
	}

	if in.IsNull() {
		return NewClusterConfigValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewClusterConfigValueMust(ClusterConfigValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ClusterConfigType) ValueType(ctx context.Context) attr.Value {
	return ClusterConfigValue{}
}

var _ basetypes.ObjectValuable = ClusterConfigValue{}

type ClusterConfigValue struct {
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v ClusterConfigValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ClusterConfigValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ClusterConfigValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ClusterConfigValue) String() string {
	return "ClusterConfigValue"
}

func (v ClusterConfigValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v ClusterConfigValue) Equal(o attr.Value) bool {
	other, ok := o.(ClusterConfigValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v ClusterConfigValue) Type(ctx context.Context) attr.Type {
	return ClusterConfigType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ClusterConfigValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LoggingType{}

type LoggingType struct {
	basetypes.ObjectType
}

func (t LoggingType) Equal(o attr.Type) bool {
	other, ok := o.(LoggingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LoggingType) String() string {
	return "LoggingType"
}

func (t LoggingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	folderIdAttribute, ok := attributes["folder_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`folder_id is missing from object`)

		return nil, diags
	}

	folderIdVal, ok := folderIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`folder_id expected to be basetypes.StringValue, was: %T`, folderIdAttribute))
	}

	logGroupIdAttribute, ok := attributes["log_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_group_id is missing from object`)

		return nil, diags
	}

	logGroupIdVal, ok := logGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_group_id expected to be basetypes.StringValue, was: %T`, logGroupIdAttribute))
	}

	minLevelAttribute, ok := attributes["min_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_level is missing from object`)

		return nil, diags
	}

	minLevelVal, ok := minLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_level expected to be basetypes.StringValue, was: %T`, minLevelAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LoggingValue{
		Enabled:    enabledVal,
		FolderId:   folderIdVal,
		LogGroupId: logGroupIdVal,
		MinLevel:   minLevelVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewLoggingValueNull() LoggingValue {
	return LoggingValue{
		state: attr.ValueStateNull,
	}
}

func NewLoggingValueUnknown() LoggingValue {
	return LoggingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLoggingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LoggingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LoggingValue Attribute Value",
				"While creating a LoggingValue value, a missing attribute value was detected. "+
					"A LoggingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LoggingValue Attribute Type",
				"While creating a LoggingValue value, an invalid attribute value was detected. "+
					"A LoggingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LoggingValue Attribute Value",
				"While creating a LoggingValue value, an extra attribute value was detected. "+
					"A LoggingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LoggingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLoggingValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	folderIdAttribute, ok := attributes["folder_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`folder_id is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	folderIdVal, ok := folderIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`folder_id expected to be basetypes.StringValue, was: %T`, folderIdAttribute))
	}

	logGroupIdAttribute, ok := attributes["log_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_group_id is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	logGroupIdVal, ok := logGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_group_id expected to be basetypes.StringValue, was: %T`, logGroupIdAttribute))
	}

	minLevelAttribute, ok := attributes["min_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_level is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	minLevelVal, ok := minLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_level expected to be basetypes.StringValue, was: %T`, minLevelAttribute))
	}

	if diags.HasError() {
		return NewLoggingValueUnknown(), diags
	}

	return LoggingValue{
		Enabled:    enabledVal,
		FolderId:   folderIdVal,
		LogGroupId: logGroupIdVal,
		MinLevel:   minLevelVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewLoggingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LoggingValue {
	object, diags := NewLoggingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLoggingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LoggingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLoggingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLoggingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLoggingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLoggingValueMust(LoggingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LoggingType) ValueType(ctx context.Context) attr.Value {
	return LoggingValue{}
}

var _ basetypes.ObjectValuable = LoggingValue{}

type LoggingValue struct {
	Enabled    basetypes.BoolValue   `tfsdk:"enabled"`
	FolderId   basetypes.StringValue `tfsdk:"folder_id"`
	LogGroupId basetypes.StringValue `tfsdk:"log_group_id"`
	MinLevel   basetypes.StringValue `tfsdk:"min_level"`
	state      attr.ValueState
}

func (v LoggingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["folder_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["log_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["min_level"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.FolderId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["folder_id"] = val

		val, err = v.LogGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["log_group_id"] = val

		val, err = v.MinLevel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_level"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LoggingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LoggingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LoggingValue) String() string {
	return "LoggingValue"
}

func (v LoggingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled":      basetypes.BoolType{},
		"folder_id":    basetypes.StringType{},
		"log_group_id": basetypes.StringType{},
		"min_level":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":      v.Enabled,
			"folder_id":    v.FolderId,
			"log_group_id": v.LogGroupId,
			"min_level":    v.MinLevel,
		})

	return objVal, diags
}

func (v LoggingValue) Equal(o attr.Value) bool {
	other, ok := o.(LoggingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.FolderId.Equal(other.FolderId) {
		return false
	}

	if !v.LogGroupId.Equal(other.LogGroupId) {
		return false
	}

	if !v.MinLevel.Equal(other.MinLevel) {
		return false
	}

	return true
}

func (v LoggingValue) Type(ctx context.Context) attr.Type {
	return LoggingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LoggingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled":      basetypes.BoolType{},
		"folder_id":    basetypes.StringType{},
		"log_group_id": basetypes.StringType{},
		"min_level":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MaintenanceWindowType{}

type MaintenanceWindowType struct {
	basetypes.ObjectType
}

func (t MaintenanceWindowType) Equal(o attr.Type) bool {
	other, ok := o.(MaintenanceWindowType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MaintenanceWindowType) String() string {
	return "MaintenanceWindowType"
}

func (t MaintenanceWindowType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dayAttribute, ok := attributes["day"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day is missing from object`)

		return nil, diags
	}

	dayVal, ok := dayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day expected to be basetypes.StringValue, was: %T`, dayAttribute))
	}

	hourAttribute, ok := attributes["hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hour is missing from object`)

		return nil, diags
	}

	hourVal, ok := hourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hour expected to be basetypes.Int64Value, was: %T`, hourAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MaintenanceWindowValue{
		Day:                   dayVal,
		Hour:                  hourVal,
		MaintenanceWindowType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceWindowValueNull() MaintenanceWindowValue {
	return MaintenanceWindowValue{
		state: attr.ValueStateNull,
	}
}

func NewMaintenanceWindowValueUnknown() MaintenanceWindowValue {
	return MaintenanceWindowValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMaintenanceWindowValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MaintenanceWindowValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MaintenanceWindowValue Attribute Value",
				"While creating a MaintenanceWindowValue value, a missing attribute value was detected. "+
					"A MaintenanceWindowValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MaintenanceWindowValue Attribute Type",
				"While creating a MaintenanceWindowValue value, an invalid attribute value was detected. "+
					"A MaintenanceWindowValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MaintenanceWindowValue Attribute Value",
				"While creating a MaintenanceWindowValue value, an extra attribute value was detected. "+
					"A MaintenanceWindowValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MaintenanceWindowValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMaintenanceWindowValueUnknown(), diags
	}

	dayAttribute, ok := attributes["day"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	dayVal, ok := dayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day expected to be basetypes.StringValue, was: %T`, dayAttribute))
	}

	hourAttribute, ok := attributes["hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hour is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	hourVal, ok := hourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hour expected to be basetypes.Int64Value, was: %T`, hourAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewMaintenanceWindowValueUnknown(), diags
	}

	return MaintenanceWindowValue{
		Day:                   dayVal,
		Hour:                  hourVal,
		MaintenanceWindowType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceWindowValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MaintenanceWindowValue {
	object, diags := NewMaintenanceWindowValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMaintenanceWindowValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MaintenanceWindowType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMaintenanceWindowValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMaintenanceWindowValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMaintenanceWindowValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMaintenanceWindowValueMust(MaintenanceWindowValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MaintenanceWindowType) ValueType(ctx context.Context) attr.Value {
	return MaintenanceWindowValue{}
}

var _ basetypes.ObjectValuable = MaintenanceWindowValue{}

type MaintenanceWindowValue struct {
	Day                   basetypes.StringValue `tfsdk:"day"`
	Hour                  basetypes.Int64Value  `tfsdk:"hour"`
	MaintenanceWindowType basetypes.StringValue `tfsdk:"type"`
	state                 attr.ValueState
}

func (v MaintenanceWindowValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["day"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hour"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Day.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["day"] = val

		val, err = v.Hour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hour"] = val

		val, err = v.MaintenanceWindowType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MaintenanceWindowValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MaintenanceWindowValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MaintenanceWindowValue) String() string {
	return "MaintenanceWindowValue"
}

func (v MaintenanceWindowValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"day":  basetypes.StringType{},
		"hour": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"day":  v.Day,
			"hour": v.Hour,
			"type": v.MaintenanceWindowType,
		})

	return objVal, diags
}

func (v MaintenanceWindowValue) Equal(o attr.Value) bool {
	other, ok := o.(MaintenanceWindowValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Day.Equal(other.Day) {
		return false
	}

	if !v.Hour.Equal(other.Hour) {
		return false
	}

	if !v.MaintenanceWindowType.Equal(other.MaintenanceWindowType) {
		return false
	}

	return true
}

func (v MaintenanceWindowValue) Type(ctx context.Context) attr.Type {
	return MaintenanceWindowType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MaintenanceWindowValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"day":  basetypes.StringType{},
		"hour": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TimeoutsType{}

type TimeoutsType struct {
	basetypes.ObjectType
}

func (t TimeoutsType) Equal(o attr.Type) bool {
	other, ok := o.(TimeoutsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TimeoutsType) String() string {
	return "TimeoutsType"
}

func (t TimeoutsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return TimeoutsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTimeoutsValueNull() TimeoutsValue {
	return TimeoutsValue{
		state: attr.ValueStateNull,
	}
}

func NewTimeoutsValueUnknown() TimeoutsValue {
	return TimeoutsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTimeoutsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TimeoutsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TimeoutsValue Attribute Value",
				"While creating a TimeoutsValue value, a missing attribute value was detected. "+
					"A TimeoutsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TimeoutsValue Attribute Type",
				"While creating a TimeoutsValue value, an invalid attribute value was detected. "+
					"A TimeoutsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TimeoutsValue Attribute Value",
				"While creating a TimeoutsValue value, an extra attribute value was detected. "+
					"A TimeoutsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TimeoutsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTimeoutsValueUnknown(), diags
	}

	if diags.HasError() {
		return NewTimeoutsValueUnknown(), diags
	}

	return TimeoutsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTimeoutsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TimeoutsValue {
	object, diags := NewTimeoutsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTimeoutsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TimeoutsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTimeoutsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTimeoutsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTimeoutsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTimeoutsValueMust(TimeoutsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TimeoutsType) ValueType(ctx context.Context) attr.Value {
	return TimeoutsValue{}
}

var _ basetypes.ObjectValuable = TimeoutsValue{}

type TimeoutsValue struct {
	state attr.ValueState
}

func (v TimeoutsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TimeoutsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TimeoutsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TimeoutsValue) String() string {
	return "TimeoutsValue"
}

func (v TimeoutsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v TimeoutsValue) Equal(o attr.Value) bool {
	other, ok := o.(TimeoutsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v TimeoutsValue) Type(ctx context.Context) attr.Type {
	return TimeoutsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TimeoutsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
